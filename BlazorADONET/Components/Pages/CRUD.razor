@page "/CRUD"
@using System.Data.SqlClient
@using Domain_Models

<h1>Database Component</h1>

<input @bind="className" placeholder="Class Name" />

<button @onclick="InsertData">Insert</button>

@if (classes != null)
{
    foreach (var cls in classes)
    {
        <div class="card">
            <div class="card-body">
                <div class="card-content">
                    <h5 class="card-title">ClassID: @cls.Id</h5>
                    <div class="name-container">
                        <p class="class-name">ClassName: @cls.ClassName</p>
                    </div>
                    <div class="students-container">
                        <h5>Students:</h5>
                        <ul>
                            @foreach (var student in cls.Students)
                            {
                                <li>StudentID: @student.Id - FirstName: @student.FirstName - LastName: @student.LastName</li>
                            }
                        </ul>
                    </div>
                    <div class="teachers-container">
                        <h5>Teachers:</h5>
                        <ul>
                            @foreach (var teacher in cls.Teachers)
                            {
                                <li>TeacherID: @teacher.Id - FirstName: @teacher.FirstName - LastName: @teacher.LastName</li>
                            }
                        </ul>
                    </div>
                    <div class="add-student-container">
                        <h5>Add Student:</h5>
                        <input @bind="newStudentFirstName" placeholder="First Name" />
                        <input @bind="newStudentLastName" placeholder="Last Name" />
                        <button @onclick="() => AddStudent(cls.Id)">Add</button>
                    </div>
                </div>
                <div class="button-container">
                    <button @onclick="() => EditData(cls.Id)">Edit</button>
                    <button @onclick="() => DeleteData(cls.Id)">Delete</button>
                </div>
            </div>
        </div>
    }
}
@code {
    private string className = "Hoved forløb X";
    private List<Class> classes;
    private string newStudentFirstName = "";
    private string newStudentLastName = "";


    protected override void OnInitialized()
    {
        ReadData();
    }

    private void InsertData()
    {
        string connectionString = $"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ADONET;Integrated Security=True;Connect Timeout=30;Encrypt=False;";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            string sql = "INSERT INTO Class (ClassName) VALUES (@ClassName)";

            using (SqlCommand command = new SqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@ClassName", className);

                command.ExecuteNonQuery();
            }
        }
        ReadData();
    }

    private void ReadData()
    {
        string connectionString = $"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ADONET;Integrated Security=True;Connect Timeout=30;Encrypt=False;";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            string sql = @"
   SELECT C.*, S.Id AS StudentId, S.FirstName AS StudentFirstName, S.LastName AS StudentLastName, T.Id AS TeacherId, T.FirstName AS TeacherFirstName, T.LastName AS TeacherLastName
   FROM Class C
   LEFT JOIN Enrollment E ON C.Id = E.ClassId
   LEFT JOIN Student S ON E.StudentId = S.Id
   LEFT JOIN TeacherClass TC ON C.Id = TC.ClassId
   LEFT JOIN Teacher T ON TC.TeacherId = T.Id
";

            using (SqlCommand command = new SqlCommand(sql, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    classes = new List<Class>();
                    while (reader.Read())
                    {
                        var cls = new Class
                            {
                                Id = Convert.ToInt32(reader["Id"]),
                                ClassName = reader["ClassName"].ToString(),
                                Students = new List<Student>(),
                                Teachers = new List<Teacher>()
                            };
                        if (!reader.IsDBNull(reader.GetOrdinal("StudentFirstName")))
                        {
                            cls.Students.Add(new Student
                                {
                                    Id = Convert.ToInt32(reader["StudentId"]),
                                    FirstName = reader["StudentFirstName"].ToString(),
                                    LastName = reader["StudentLastName"].ToString()
                                });
                        }
                        if (!reader.IsDBNull(reader.GetOrdinal("TeacherFirstName")))
                        {
                            cls.Teachers.Add(new Teacher
                                {
                                    Id = Convert.ToInt32(reader["TeacherId"]),
                                    FirstName = reader["TeacherFirstName"].ToString(),
                                    LastName = reader["TeacherLastName"].ToString()
                                });
                        }
                        classes.Add(cls);
                    }
                }
            }
        }
    }

    private void DeleteData(int classId)
    {
        string connectionString = $"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ADONET;Integrated Security=True;Connect Timeout=30;Encrypt=False;";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            string sql = "DELETE FROM TeacherClass WHERE ClassId = @ClassId";

            using (SqlCommand command = new SqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@ClassId", classId);

                command.ExecuteNonQuery();
            }

            sql = "DELETE FROM Enrollment WHERE ClassId = @ClassId";

            using (SqlCommand command = new SqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@ClassId", classId);

                command.ExecuteNonQuery();
            }

            sql = "DELETE FROM Class WHERE Id = @Id";

            using (SqlCommand command = new SqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Id", classId);

                command.ExecuteNonQuery();
            }
        }
        ReadData();
    }

    private void EditData(int classId)
    {
        string connectionString = $"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ADONET;Integrated Security=True;Connect Timeout=30;Encrypt=False;";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            string sql = "UPDATE Class SET ClassName = @ClassName WHERE Id = @Id";

            using (SqlCommand command = new SqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@ClassName", className);
                command.Parameters.AddWithValue("@Id", classId);

                command.ExecuteNonQuery();
            }
        }
        ReadData();
    }
    private void AddStudent(int classId)
    {
        string connectionString = $"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ADONET;Integrated Security=True;Connect Timeout=30;Encrypt=False;";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            string sql = "INSERT INTO Student (FirstName, LastName) OUTPUT INSERTED.Id VALUES (@FirstName, @LastName)";

            using (SqlCommand command1 = new SqlCommand(sql, connection))
            {
                command1.Parameters.AddWithValue("@FirstName", newStudentFirstName);
                command1.Parameters.AddWithValue("@LastName", newStudentLastName);

                int newStudentId = (int)command1.ExecuteScalar();

                sql = "INSERT INTO Enrollment (StudentId, ClassId) VALUES (@StudentId, @ClassId)";

                using (SqlCommand command2 = new SqlCommand(sql, connection))
                {
                    command2.Parameters.AddWithValue("@StudentId", newStudentId);
                    command2.Parameters.AddWithValue("@ClassId", classId);

                    command2.ExecuteNonQuery();
                }
            }
        }
        ReadData();
    }

}
